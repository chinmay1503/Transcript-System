/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.bharatividyapeeth.transcriptmailingsystem;

import com.bharatividyapeeth.transcriptmailingsystem.Data.DBConnection;
import com.bharatividyapeeth.transcriptmailingsystem.Data.Student;
import com.bharatividyapeeth.transcriptmailingsystem.Exception.TranscriptException;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.io.IOUtils;
import org.oxbow.swingbits.table.filter.TableRowFilterSupport;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

import static com.bharatividyapeeth.transcriptmailingsystem.Data.Constants.READY;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.Constants.RECEIVED;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.Constants.TRANSCRIPT_COLLECTED;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.Constants.TRANSCRIPT_READY;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.Constants.TRANSCRIPT_RECIEVED;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.EmailMessage.end_message;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.EmailMessage.greeting;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.EmailMessage.header_message;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.EmailMessage.ready_message;
import static com.bharatividyapeeth.transcriptmailingsystem.Data.EmailMessage.recieved_message;
import static javax.swing.JOptionPane.showMessageDialog;
import static org.apache.commons.lang3.StringUtils.isAlphaSpace;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNumeric;

/**
 *
 * @author Chinmay
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    CardLayout cardLayout;
    DBConnection dbConn = new DBConnection();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat simpleFormat = new SimpleDateFormat("dd-MM-yyyy");
    Properties props = new Properties();

    public mainFrame() {

        initComponents();
        customizeTables();
        loadProperties();
        initializeOtherStuff();
        cardLayout = (CardLayout) (rightPanel.getLayout());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        bvcoe = new javax.swing.JLabel();
        trans_rec_btn = new javax.swing.JLabel();
        trans_ready_btn = new javax.swing.JLabel();
        trans_collected_btn = new javax.swing.JLabel();
        student_list_btn = new javax.swing.JLabel();
        add_new_record_btn = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        introPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        newRecord = new javax.swing.JPanel();
        studentName = new javax.swing.JTextField();
        mobNumber = new javax.swing.JTextField();
        emailAddress = new javax.swing.JTextField();
        departmentComboBox = new javax.swing.JComboBox<>();
        namelbl = new javax.swing.JLabel();
        phnlbl = new javax.swing.JLabel();
        emaillbl = new javax.swing.JLabel();
        deptlbl = new javax.swing.JLabel();
        passinglbl = new javax.swing.JLabel();
        passingDate = new com.toedter.calendar.JDateChooser();
        cancel_btn = new javax.swing.JLabel();
        submit_btn = new javax.swing.JLabel();
        studentsPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        studentDetailsTable = new javax.swing.JTable();
        delete_btn = new javax.swing.JLabel();
        recievedPanel = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        receivedTable = new javax.swing.JTable();
        move_to_ready_btn1 = new javax.swing.JLabel();
        readyPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        readyTable = new javax.swing.JTable();
        move_to_collected_btn = new javax.swing.JLabel();
        collectedPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        collectedTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Transcript Mailing System");
        setResizable(false);

        leftPanel.setBackground(new java.awt.Color(29, 47, 61));
        leftPanel.setMinimumSize(new java.awt.Dimension(260, 380));
        leftPanel.setPreferredSize(new java.awt.Dimension(240, 640));
        leftPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bvcoe.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        bvcoe.setForeground(new java.awt.Color(240, 240, 240));
        bvcoe.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bvcoe.setText("BVCOENM");
        bvcoe.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bvcoe.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bvcoe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bvcoeMouseClicked(evt);
            }
        });
        leftPanel.add(bvcoe, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 260, -1));

        trans_rec_btn.setBackground(new java.awt.Color(33, 63, 86));
        trans_rec_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trans_rec_btn.setForeground(new java.awt.Color(255, 255, 255));
        trans_rec_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        trans_rec_btn.setText("Transcripts Received");
        trans_rec_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trans_rec_btn.setOpaque(true);
        trans_rec_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trans_rec_btnMouseClicked(evt);
            }
        });
        leftPanel.add(trans_rec_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 260, 150, 30));

        trans_ready_btn.setBackground(new java.awt.Color(33, 63, 86));
        trans_ready_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trans_ready_btn.setForeground(new java.awt.Color(255, 255, 255));
        trans_ready_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        trans_ready_btn.setText("Transcript Ready");
        trans_ready_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trans_ready_btn.setOpaque(true);
        trans_ready_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trans_ready_btnMouseClicked(evt);
            }
        });
        leftPanel.add(trans_ready_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 310, 150, 30));

        trans_collected_btn.setBackground(new java.awt.Color(33, 63, 86));
        trans_collected_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        trans_collected_btn.setForeground(new java.awt.Color(255, 255, 255));
        trans_collected_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        trans_collected_btn.setText("Transcript Collected");
        trans_collected_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trans_collected_btn.setOpaque(true);
        trans_collected_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trans_collected_btnMouseClicked(evt);
            }
        });
        leftPanel.add(trans_collected_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 360, 150, 30));

        student_list_btn.setBackground(new java.awt.Color(33, 63, 86));
        student_list_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        student_list_btn.setForeground(new java.awt.Color(255, 255, 255));
        student_list_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        student_list_btn.setText("Student List");
        student_list_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        student_list_btn.setOpaque(true);
        student_list_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                student_list_btnMouseClicked(evt);
            }
        });
        leftPanel.add(student_list_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 210, 150, 30));

        add_new_record_btn.setBackground(new java.awt.Color(33, 63, 86));
        add_new_record_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        add_new_record_btn.setForeground(new java.awt.Color(255, 255, 255));
        add_new_record_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        add_new_record_btn.setText("Add New Record");
        add_new_record_btn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add_new_record_btn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add_new_record_btn.setOpaque(true);
        add_new_record_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                add_new_record_btnMouseClicked(evt);
            }
        });
        leftPanel.add(add_new_record_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 160, 150, 30));

        jSplitPane2.setLeftComponent(leftPanel);

        rightPanel.setLayout(new java.awt.CardLayout());

        introPanel.setBackground(new java.awt.Color(33, 63, 86));
        introPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setIcon(new javax.swing.ImageIcon("F:\\Projects\\transcriptMailingSystem\\resources\\logo.png")); // NOI18N
        introPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, -1, -1));

        rightPanel.add(introPanel, "introPanel");

        newRecord.setBackground(new java.awt.Color(33, 63, 86));
        newRecord.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentName.setBackground(new java.awt.Color(231, 235, 238));
        studentName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        studentName.setAutoscrolls(false);
        newRecord.add(studentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, 160, 30));

        mobNumber.setBackground(new java.awt.Color(231, 235, 238));
        mobNumber.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        mobNumber.setAutoscrolls(false);
        mobNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mobNumberActionPerformed(evt);
            }
        });
        newRecord.add(mobNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 120, 160, 30));

        emailAddress.setBackground(new java.awt.Color(231, 235, 238));
        emailAddress.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        newRecord.add(emailAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 180, 160, 30));

        departmentComboBox.setBackground(new java.awt.Color(231, 235, 238));
        departmentComboBox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        departmentComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentComboBoxActionPerformed(evt);
            }
        });
        newRecord.add(departmentComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 240, 170, 30));

        namelbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        namelbl.setForeground(new java.awt.Color(255, 255, 255));
        namelbl.setText("Name :");
        newRecord.add(namelbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 70, 50, 20));

        phnlbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phnlbl.setForeground(new java.awt.Color(255, 255, 255));
        phnlbl.setText("Mobile No :");
        newRecord.add(phnlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, -1, -1));

        emaillbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        emaillbl.setForeground(new java.awt.Color(255, 255, 255));
        emaillbl.setText("Email Address :");
        newRecord.add(emaillbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, -1, -1));

        deptlbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deptlbl.setForeground(new java.awt.Color(255, 255, 255));
        deptlbl.setText("Department :");
        newRecord.add(deptlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 240, -1, 30));

        passinglbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        passinglbl.setForeground(new java.awt.Color(255, 255, 255));
        passinglbl.setText("Pass-out Year :");
        newRecord.add(passinglbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 310, -1, -1));

        passingDate.setBackground(new java.awt.Color(231, 235, 238));
        passingDate.setForeground(new java.awt.Color(231, 235, 238));
        passingDate.setDateFormatString("dd-MM-yyyy");
        passingDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        passingDate.setMaximumSize(new java.awt.Dimension(50, 20));
        passingDate.setPreferredSize(new java.awt.Dimension(50, 20));
        newRecord.add(passingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 300, 120, 30));

        cancel_btn.setBackground(new java.awt.Color(29, 47, 61));
        cancel_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        cancel_btn.setForeground(new java.awt.Color(255, 255, 255));
        cancel_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cancel_btn.setText("Cancel");
        cancel_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 204), 1, true));
        cancel_btn.setOpaque(true);
        cancel_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancel_btnMouseClicked(evt);
            }
        });
        newRecord.add(cancel_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 430, 150, 30));

        submit_btn.setBackground(new java.awt.Color(29, 47, 61));
        submit_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        submit_btn.setForeground(new java.awt.Color(255, 255, 255));
        submit_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        submit_btn.setText("Submit");
        submit_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 204), 1, true));
        submit_btn.setOpaque(true);
        submit_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                submit_btnMouseClicked(evt);
            }
        });
        newRecord.add(submit_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 430, 150, 30));

        rightPanel.add(newRecord, "newRecord");

        studentsPanel.setBackground(new java.awt.Color(33, 63, 86));
        studentsPanel.setMinimumSize(new java.awt.Dimension(870, 93));
        studentsPanel.setPreferredSize(new java.awt.Dimension(870, 472));
        studentsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        studentDetailsTable.setAutoCreateRowSorter(true);
        studentDetailsTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        studentDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        studentDetailsTable.setToolTipText("studentDetailsTable");
        studentDetailsTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        studentDetailsTable.setRowHeight(25);
        studentDetailsTable.setSelectionBackground(new java.awt.Color(232, 57, 95));
        jScrollPane6.setViewportView(studentDetailsTable);
        studentDetailsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        studentsPanel.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 870, -1));

        delete_btn.setBackground(new java.awt.Color(29, 47, 61));
        delete_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        delete_btn.setForeground(new java.awt.Color(255, 255, 255));
        delete_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        delete_btn.setText("Delete");
        delete_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 204), 1, true));
        delete_btn.setOpaque(true);
        delete_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                delete_btnMouseClicked(evt);
            }
        });
        studentsPanel.add(delete_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 540, 150, 30));

        rightPanel.add(studentsPanel, "studentsPanel");

        recievedPanel.setBackground(new java.awt.Color(33, 63, 86));
        recievedPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        receivedTable.setAutoCreateRowSorter(true);
        receivedTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        receivedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        receivedTable.setToolTipText("recievedTable");
        receivedTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        receivedTable.setRowHeight(25);
        receivedTable.setSelectionBackground(new java.awt.Color(232, 57, 95));
        jScrollPane5.setViewportView(receivedTable);
        receivedTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        recievedPanel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 870, -1));

        move_to_ready_btn1.setBackground(new java.awt.Color(29, 47, 61));
        move_to_ready_btn1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        move_to_ready_btn1.setForeground(new java.awt.Color(255, 255, 255));
        move_to_ready_btn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        move_to_ready_btn1.setText("Move To Ready");
        move_to_ready_btn1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 204), 1, true));
        move_to_ready_btn1.setOpaque(true);
        move_to_ready_btn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                move_to_ready_btn1MouseClicked(evt);
            }
        });
        recievedPanel.add(move_to_ready_btn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 540, 150, 30));

        rightPanel.add(recievedPanel, "recievedPanel");

        readyPanel.setBackground(new java.awt.Color(33, 63, 86));
        readyPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        readyTable.setAutoCreateRowSorter(true);
        readyTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        readyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        readyTable.setToolTipText("readyTable");
        readyTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        readyTable.setRowHeight(25);
        readyTable.setSelectionBackground(new java.awt.Color(232, 57, 95));
        jScrollPane4.setViewportView(readyTable);
        readyTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        readyPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 870, -1));

        move_to_collected_btn.setBackground(new java.awt.Color(29, 47, 61));
        move_to_collected_btn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        move_to_collected_btn.setForeground(new java.awt.Color(255, 255, 255));
        move_to_collected_btn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        move_to_collected_btn.setText("Move To Collected");
        move_to_collected_btn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 255, 204), 1, true));
        move_to_collected_btn.setOpaque(true);
        move_to_collected_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                move_to_collected_btnMouseClicked(evt);
            }
        });
        readyPanel.add(move_to_collected_btn, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 540, 150, 30));

        rightPanel.add(readyPanel, "readyPanel");

        collectedPanel.setBackground(new java.awt.Color(33, 63, 86));
        collectedPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        collectedTable.setAutoCreateRowSorter(true);
        collectedTable.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        collectedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        collectedTable.setToolTipText("collectedTable");
        collectedTable.setGridColor(new java.awt.Color(255, 255, 255));
        collectedTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        collectedTable.setRowHeight(25);
        collectedTable.setSelectionBackground(new java.awt.Color(232, 57, 95));
        jScrollPane3.setViewportView(collectedTable);
        collectedTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        collectedPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 870, -1));

        rightPanel.add(collectedPanel, "collectedPanel");
        collectedPanel.getAccessibleContext().setAccessibleName("");

        jSplitPane2.setRightComponent(rightPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jSplitPane2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void setLblColor(JLabel lbl) {
        lbl.setBackground(new Color(22, 42, 57));
    }

    public void resetLblColor(JLabel lbl) {
        lbl.setBackground(new Color(33, 63, 86));
    }

    public void resetBtnColors(JLabel lbl1, JLabel lbl2, JLabel lbl3, JLabel lbl4) {
        resetLblColor(lbl1);
        resetLblColor(lbl2);
        resetLblColor(lbl3);
        resetLblColor(lbl4);
    }

    private void departmentComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_departmentComboBoxActionPerformed

    private void mobNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mobNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mobNumberActionPerformed

    private void bvcoeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bvcoeMouseClicked
        // TODO add your handling code here:
        cardLayout.show(rightPanel, "introPanel");
    }//GEN-LAST:event_bvcoeMouseClicked

    private void add_new_record_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_new_record_btnMouseClicked
        setLblColor(add_new_record_btn);
        resetBtnColors(student_list_btn, trans_rec_btn, trans_ready_btn, trans_collected_btn);
        cardLayout.show(rightPanel, "newRecord");
    }//GEN-LAST:event_add_new_record_btnMouseClicked

    private void student_list_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_student_list_btnMouseClicked
        setLblColor(student_list_btn);
        resetBtnColors(add_new_record_btn, trans_rec_btn, trans_ready_btn, trans_collected_btn);
        cardLayout.show(rightPanel, "studentsPanel");
        getStudentList();
    }//GEN-LAST:event_student_list_btnMouseClicked

    private void trans_rec_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trans_rec_btnMouseClicked
        setLblColor(trans_rec_btn);
        resetBtnColors(add_new_record_btn, student_list_btn, trans_ready_btn, trans_collected_btn);
        cardLayout.show(rightPanel, "recievedPanel");
        getRecievedList();
    }//GEN-LAST:event_trans_rec_btnMouseClicked

    private void trans_ready_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trans_ready_btnMouseClicked
        setLblColor(trans_ready_btn);
        resetBtnColors(add_new_record_btn, student_list_btn, trans_rec_btn, trans_collected_btn);
        cardLayout.show(rightPanel, "readyPanel");
        getReadyList();
    }//GEN-LAST:event_trans_ready_btnMouseClicked

    private void trans_collected_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trans_collected_btnMouseClicked
        setLblColor(trans_collected_btn);
        resetBtnColors(add_new_record_btn, student_list_btn, trans_rec_btn, trans_ready_btn);
        cardLayout.show(rightPanel, "collectedPanel");
        getCollectedList();
    }//GEN-LAST:event_trans_collected_btnMouseClicked

    private void cancel_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancel_btnMouseClicked
        resetAddNewRecords();
    }//GEN-LAST:event_cancel_btnMouseClicked

    private void submit_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_submit_btnMouseClicked
        try {
            String name = studentName.getText();
            checkValidName(name);
            String number = mobNumber.getText();
            checkValidNumber(number);
            checkUnique(number);
            String emailAdd = emailAddress.getText();
            checkValidEmailAdd(emailAdd);
            String dept = departmentComboBox.getItemAt(departmentComboBox.getSelectedIndex());
            Date date = passingDate.getDate();
            String formattedDate = sdf.format(date);

            String sql = "INSERT INTO Students(name, phone_number, email_address, dept_code, passing_year, is_recieved) "
                    + "VALUES('" + name + "', '" + number + "' , '" + emailAdd + "', '" + dept + "',strftime('%d-%m-%Y', '" + formattedDate + "'), true)";
            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
            try {
                int studentId = 0;
                conn = dbConn.getConnection();
                pstmt = conn.prepareStatement(sql);
                pstmt.executeUpdate();
                sql = "SELECT MAX(id) FROM Students";
                pstmt = conn.prepareStatement(sql);
                rs = pstmt.executeQuery();
                while (rs.next()) {
                    studentId = rs.getInt(1);
                }
                Student student = new Student(studentId, name, emailAdd);
                List<Student> studentList = new ArrayList();
                studentList.add(student);
                showMessageDialog(null, "New student record has been added and mail has been sent!.",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
                resetAddNewRecords();
                sql = "INSERT INTO Transcript_Received (id, name, phone_number, email_address, dept_code, received_date) "
                        + "SELECT id, name, phone_number, email_address, dept_code, datetime('now') FROM Students WHERE id = " + studentId;
                pstmt = conn.prepareStatement(sql);
                pstmt.executeUpdate();
                sendMail(studentList, RECEIVED);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            } finally {
                DbUtils.closeQuietly(conn);
                DbUtils.closeQuietly(pstmt);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_submit_btnMouseClicked

    private void move_to_ready_btn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_move_to_ready_btn1MouseClicked
        int[] rows = receivedTable.getSelectedRows();
        List<Student> studentList = new ArrayList<>();
        for (int i : rows) {
            String id = (String) receivedTable.getValueAt(i, 0);
            int studentId = Integer.parseInt(id);
            String name = (String) receivedTable.getValueAt(i, 1);
            String emailAdd = (String) receivedTable.getValueAt(i, 3);
            studentList.add(new Student(studentId, name, emailAdd));
            moveToNextState(studentId, TRANSCRIPT_RECIEVED, TRANSCRIPT_READY, "ready_date");
        }
        getRecievedList();
        if (!studentList.isEmpty()) {
            try {
                sendMail(studentList, READY);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_move_to_ready_btn1MouseClicked

    private void move_to_collected_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_move_to_collected_btnMouseClicked
        int[] rows = readyTable.getSelectedRows();
        List<Student> studentList = new ArrayList<>();
        for (int i : rows) {
            String id = (String) readyTable.getValueAt(i, 0);
            int studentId = Integer.parseInt(id);
            String name = (String) readyTable.getValueAt(i, 1);
            String emailAdd = (String) readyTable.getValueAt(i, 3);
            studentList.add(new Student(studentId, name, emailAdd));
            moveToNextState(studentId, TRANSCRIPT_READY, TRANSCRIPT_COLLECTED, "collected_date");
        }
        getReadyList();
    }//GEN-LAST:event_move_to_collected_btnMouseClicked

    private void delete_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_delete_btnMouseClicked
        int dialogResult = JOptionPane.showConfirmDialog(null, "Are you Sure you want to Delete?", "Warning", JOptionPane.YES_NO_OPTION);
        if (dialogResult == JOptionPane.YES_OPTION) {
            deleteRecords();
            getStudentList();
        }
    }//GEN-LAST:event_delete_btnMouseClicked

    private void getStudentList() {
        Connection conn = null;
        PreparedStatement psmt = null;
        ResultSet rs = null;
        try {
            conn = dbConn.getConnection();
            psmt = conn.prepareStatement("SELECT id AS ID,name AS Name,phone_number AS 'Mobile Number',"
                    + "                   email_address AS 'Email Address', dept_code AS Department,"
                    + "                   passing_year AS 'Passing Year', "
                    + "                   is_recieved as Recieved,"
                    + "                   is_ready as Ready,"
                    + "                   is_collected as Collected FROM Students");
            rs = psmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tableModel = (DefaultTableModel) studentDetailsTable.getModel();
            // clear existing columns 
            tableModel.setColumnCount(0);
            // add specified columns to table
            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(rsmd.getColumnName(i));
            }
            // clear existing rows
            tableModel.setRowCount(0);
            // add rows to table
            while (rs.next()) {
                String[] row = new String[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getString(i + 1);
                }
                tableModel.addRow(row);
            }
            tableModel.fireTableDataChanged();
            //studentDetailsTable.setDefaultEditor(Object.class, null);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            DbUtils.closeQuietly(psmt);
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(conn);
        }
    }

    private void getRecievedList() {
        Connection conn = null;
        PreparedStatement psmt = null;
        ResultSet rs = null;
        try {
            conn = dbConn.getConnection();
            psmt = conn.prepareStatement("SELECT id AS ID,name AS Name,phone_number AS 'Mobile Number',"
                    + "                   email_address AS 'Email Address', dept_code AS Department,"
                    + "                   received_date AS 'Date Received' "
                    + "                   FROM Transcript_Received");
            rs = psmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tableModel = (DefaultTableModel) receivedTable.getModel();
            // clear existing columns 
            tableModel.setColumnCount(0);
            // add specified columns to table
            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(rsmd.getColumnName(i));
            }
            // clear existing rows
            tableModel.setRowCount(0);
            // add rows to table
            while (rs.next()) {
                String[] row = new String[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getString(i + 1);
                }
                tableModel.addRow(row);
            }
            tableModel.fireTableDataChanged();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            DbUtils.closeQuietly(psmt);
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(conn);
        }
    }

    private void getReadyList() {
        Connection conn = null;
        PreparedStatement psmt = null;
        ResultSet rs = null;
        try {
            conn = dbConn.getConnection();
            psmt = conn.prepareStatement("SELECT id AS ID,name AS Name,phone_number AS 'Mobile Number',"
                    + "                   email_address AS 'Email Address', dept_code AS Department,"
                    + "                   ready_date AS 'Date Ready' "
                    + "                   FROM Transcript_Ready");
            rs = psmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tableModel = (DefaultTableModel) readyTable.getModel();
            // clear existing columns 
            tableModel.setColumnCount(0);
            // add specified columns to table
            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(rsmd.getColumnName(i));
            }
            // clear existing rows
            tableModel.setRowCount(0);
            // add rows to table
            while (rs.next()) {
                String[] row = new String[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getString(i + 1);
                }
                tableModel.addRow(row);
            }
            tableModel.fireTableDataChanged();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            DbUtils.closeQuietly(psmt);
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(conn);
        }
    }

    private void getCollectedList() {
        Connection conn = null;
        PreparedStatement psmt = null;
        ResultSet rs = null;
        try {
            conn = dbConn.getConnection();
            psmt = conn.prepareStatement("SELECT id AS ID,name AS Name,phone_number AS 'Mobile Number',"
                    + "                   email_address AS 'Email Address', dept_code AS Department,"
                    + "                   collected_date AS 'Date Collected' "
                    + "                   FROM Transcript_Collected");
            rs = psmt.executeQuery();
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnCount = rsmd.getColumnCount();

            // for changing column and row model
            DefaultTableModel tableModel = (DefaultTableModel) collectedTable.getModel();
            // clear existing columns 
            tableModel.setColumnCount(0);
            // add specified columns to table
            for (int i = 1; i <= columnCount; i++) {
                tableModel.addColumn(rsmd.getColumnName(i));
            }
            // clear existing rows
            tableModel.setRowCount(0);
            // add rows to table
            while (rs.next()) {
                String[] row = new String[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    row[i] = rs.getString(i + 1);
                }
                tableModel.addRow(row);
            }
            tableModel.fireTableDataChanged();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            DbUtils.closeQuietly(psmt);
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(conn);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel add_new_record_btn;
    private javax.swing.JLabel bvcoe;
    private javax.swing.JLabel cancel_btn;
    private javax.swing.JPanel collectedPanel;
    private javax.swing.JTable collectedTable;
    private javax.swing.JLabel delete_btn;
    private javax.swing.JComboBox<String> departmentComboBox;
    private javax.swing.JLabel deptlbl;
    private javax.swing.JTextField emailAddress;
    private javax.swing.JLabel emaillbl;
    private javax.swing.JPanel introPanel;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JTextField mobNumber;
    private javax.swing.JLabel move_to_collected_btn;
    private javax.swing.JLabel move_to_ready_btn1;
    private javax.swing.JLabel namelbl;
    private javax.swing.JPanel newRecord;
    private com.toedter.calendar.JDateChooser passingDate;
    private javax.swing.JLabel passinglbl;
    private javax.swing.JLabel phnlbl;
    private javax.swing.JPanel readyPanel;
    private javax.swing.JTable readyTable;
    private javax.swing.JTable receivedTable;
    private javax.swing.JPanel recievedPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JTable studentDetailsTable;
    private javax.swing.JTextField studentName;
    private javax.swing.JLabel student_list_btn;
    private javax.swing.JPanel studentsPanel;
    private javax.swing.JLabel submit_btn;
    private javax.swing.JLabel trans_collected_btn;
    private javax.swing.JLabel trans_ready_btn;
    private javax.swing.JLabel trans_rec_btn;
    // End of variables declaration//GEN-END:variables

    private void checkValidName(String name) throws TranscriptException {
        if (isBlank(name)) {
            throw new TranscriptException("The name field cannot be blank");
        } else if (!isAlphaSpace(name)) {
            throw new TranscriptException("Name cannot contain digits or special characters");
        }
    }

    private void checkValidNumber(String number) throws TranscriptException {
        if (!isNumeric(number)) {
            throw new TranscriptException("Should only contain numbers");
        } else if (number.length() != 10) {
            throw new TranscriptException("Mobile number entered in invalid");
        }
    }

    private void checkValidEmailAdd(String emailAdd) throws TranscriptException {
        boolean isValid;
        String emailRegex = "^[a-zA-Z0-9_+&*-]+(?:\\."
                + "[a-zA-Z0-9_+&*-]+)*@"
                + "(?:[a-zA-Z0-9-]+\\.)+[a-z"
                + "A-Z]{2,7}$";

        Pattern pat = Pattern.compile(emailRegex);
        if (emailAdd == null) {
            isValid = false;
        } else {
            isValid = pat.matcher(emailAdd).matches();
        }
        if (!isValid) {
            throw new TranscriptException("Email address entered is not valid");
        }
    }

    private void fillDeptCombo() {
        Connection conn = null;
        PreparedStatement psmt = null;
        ResultSet rs = null;
        try {
            conn = dbConn.getConnection();
            psmt = conn.prepareStatement("SELECT * FROM DEPARTMENT");
            rs = psmt.executeQuery();

            while (rs.next()) {
                String deptCode = rs.getString("code");
                departmentComboBox.addItem(deptCode);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        } finally {
            DbUtils.closeQuietly(psmt);
            DbUtils.closeQuietly(rs);
            DbUtils.closeQuietly(conn);
        }
    }

    private void resetAddNewRecords() {
        studentName.setText("");
        mobNumber.setText("");
        emailAddress.setText("");
        departmentComboBox.setSelectedIndex(0);
        passingDate.setDate(null);
    }

    private void sendMail(List<Student> students, String purpose) throws SQLException {

        String from = props.getProperty("email.id");
        String password = props.getProperty("email.password");
        String sub = getSubject(purpose);
        String header = header_message + greeting + " " + "name !";
        String msg = header + " " + getMessage(purpose) + " " + end_message;
        Session session = getSession(from, password);
        //compose message    
        try {
            MimeMessage message = new MimeMessage(session);
            message.setSubject(sub);

            for (Student student : students) {
                //send message
                msg = msg.replace("name", student.getName());
                message.setContent(msg, "text/html");
                message.addRecipient(Message.RecipientType.TO, new InternetAddress(student.getEmailAddress()));
                Transport.send(message);                      //TODO : Turn it on later
                setSentMailTrue(purpose, student.getId());
            }
            //JOptionPane.showMessageDialog(this, "Message sent successfully", "Email Information", JOptionPane.INFORMATION_MESSAGE);
        } catch (MessagingException e) {
            JOptionPane.showMessageDialog(this, e, e.getMessage(), WIDTH, null);
        }
    }

    private void loadProperties() {
        InputStream input = null;
        try {
            String currDir = System.getProperty("user.dir");
            input = new FileInputStream(currDir + "\\resources\\mail.properties");
            props.load(input);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        } finally {
            IOUtils.closeQuietly(input);
        }
    }

    private Session getSession(String from, String password) {
        //get Session   
        Session session = Session.getDefaultInstance(props,
                new javax.mail.Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(from, password);
            }
        });
        return session;
    }

    private String getSubject(String purpose) {
        if (purpose.equals(RECEIVED)) {
            return "Transcript Recieved";
        } else if (purpose.equals(READY)) {
            return "Transcript Ready";
        }
        return "";
    }

    private String getMessage(String purpose) {
        if (purpose.equals(RECEIVED)) {
            return recieved_message;
        } else if (purpose.equals(READY)) {
            return ready_message;
        }
        return "";
    }

    private void customizeTables() {
        setTableAttributes(studentDetailsTable);
        setTableAttributes(readyTable);
        setTableAttributes(receivedTable);
        setTableAttributes(collectedTable);
    }

    private void setTableAttributes(JTable table) {
        table = TableRowFilterSupport.forTable(table).searchable(true).useTableRenderers(true).apply();
        table.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if ("tableCellEditor".equals(evt.getPropertyName())) {
                    JTable table1 = (JTable) evt.getSource();
                    if (!table1.isEditing()) {
                        updateData(table1);
                        refreshData(table1.getToolTipText());
                    }
                }
            }

            private void updateData(JTable table1) {
                Connection conn = null;
                PreparedStatement ps = null;
                try {
                    int i = table1.getSelectedRow();
                    conn = dbConn.getConnection();
                    String id = (String) table1.getValueAt(i, 0);
                    int studentId = Integer.parseInt(id);
                    String name = (String) table1.getValueAt(i, 1);
                    //checkValidName(name);
                    String number = (String) table1.getValueAt(i, 2);
                    //checkValidNumber(number);
                    String emailAdd = (String) table1.getValueAt(i, 3);
                    checkValidEmailAdd(emailAdd);
                    String dept = (String) table1.getValueAt(i, 4);
                    String date = (String) table1.getValueAt(i, 5);
                    String formattedDate = sdf.format(simpleFormat.parse(date));

                    String sql = "UPDATE Students set name = '" + name + "' , phone_number =  '" + number + "'"
                            + ", email_address = '" + emailAdd + "', dept_code = '" + dept + "'"
                            + ", passing_year = strftime('%d-%m-%Y', '" + formattedDate + "') "
                            + "WHERE id = " + studentId;
                    ps = conn.prepareStatement(sql);
                    ps.execute();
                } catch (TranscriptException ex) {
                    JOptionPane.showMessageDialog(table1, ex, ex.getMessage(), WIDTH, null);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(table1, ex, ex.getMessage(), WIDTH, null);
                } catch (ParseException ex) {
                    Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        DbUtils.close(ps);
                        DbUtils.close(conn);
                    } catch (SQLException ex) {
                        Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            private void refreshData(String toolTipText) {
                if (toolTipText.equals(studentDetailsTable.getToolTipText())) {
                    getStudentList();
                } else if (toolTipText.equals(receivedTable.getToolTipText())) {
                    getRecievedList();
                } else if (toolTipText.equals(readyTable.getToolTipText())) {
                    getReadyList();
                } else if (toolTipText.equals(collectedTable.getToolTipText())) {
                    getCollectedList();
                }
            }
        });
        JTableHeader tableHeader = table.getTableHeader();
        tableHeader.setFont(new Font("Segoe UI", Font.BOLD, 12));
        tableHeader.setOpaque(false);
        tableHeader.setBackground(Color.BLACK);
        tableHeader.setForeground(new Color(255, 255, 255));
        table.setRowHeight(25);
    }

    private void setSentMailTrue(String purpose, int studentId) throws SQLException {
        String tableName = null;
        switch (purpose) {
            case RECEIVED:
                tableName = "Transcript_Received";
                break;
            case READY:
                tableName = "Transcript_Ready";
                break;
        }
        String sql = "UPDATE " + tableName + " set isMailSent = 1 WHERE id = " + studentId;
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(sql);
            ps.executeUpdate();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        } finally {
            DbUtils.close(ps);
            DbUtils.close(conn);
        }
    }

    private void moveToNextState(int studentId, String tableFrom, String tableTo, String dateColumn) {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            String sql = "INSERT INTO " + tableTo + " (id, name, phone_number, email_address, dept_code, " + dateColumn + ")"
                    + "SELECT id, name, phone_number, email_address, dept_code, datetime('now', 'localtime') FROM Students WHERE id = " + studentId;
            conn = dbConn.getConnection();
            ps = conn.prepareStatement(sql);
            ps.execute();
            sql = "DELETE FROM " + tableFrom + " WHERE id = " + studentId;
            ps = conn.prepareStatement(sql);
            ps.execute();
            updateStudentStatus(studentId, tableTo);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
        } finally {
            try {
                DbUtils.close(ps);
                DbUtils.close(conn);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, ex.getMessage(), WIDTH, null);
            }
        }
    }

    private void initializeOtherStuff() {
        fillDeptCombo();
        enableSQLiteCascadeDeletes();
    }

    private void checkUnique(String number) throws TranscriptException {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            int checkUniqueCount = 0;
            conn = dbConn.getConnection();
            String sql = "SELECT COUNT(1) FROM Students WHERE phone_numer = " + number;
            ps = conn.prepareStatement(sql);
            rs = ps.executeQuery();
            while (rs.next()) {
                checkUniqueCount = rs.getInt(1);
            }
            if (checkUniqueCount > 0) {
                throw new TranscriptException("This phone number already exists in the database, Enter unique 10-digit phone number");
            }
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                DbUtils.close(ps);
                DbUtils.close(conn);
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void updateStudentStatus(int studentId, String tableTo) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            conn = dbConn.getConnection();
            String columnName = getFlagColumn(tableTo);
            String sql = "UPDATE Students set " + columnName + " = 1 WHERE id = " + studentId;
            ps = conn.prepareStatement(sql);
            ps.execute();
        } catch (SQLException ex) {
            Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                DbUtils.close(ps);
                DbUtils.close(conn);
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private String getFlagColumn(String tableTo) {
        if (tableTo.equals(TRANSCRIPT_READY)) {
            return "is_ready";
        } else if (tableTo.equals(TRANSCRIPT_COLLECTED)) {
            return "is_collected";
        }
        return "";
    }

    private void deleteRecords() {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            int[] rows = studentDetailsTable.getSelectedRows();
            for (int i : rows) {
                conn = dbConn.getConnection();
                String id = (String) studentDetailsTable.getValueAt(i, 0);
                int studentId = Integer.parseInt(id);
                String sql = "Delete FROM Students WHERE id = " + studentId;
                ps = conn.prepareStatement(sql);
                ps.execute();
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(studentDetailsTable, ex, ex.getMessage(), WIDTH, null);
        } finally {
            try {
                DbUtils.close(ps);
                DbUtils.close(conn);
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void enableSQLiteCascadeDeletes() {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            String sql = "PRAGMA foreign_keys=ON";
            ps = conn.prepareStatement(sql);
            ps.execute();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(studentDetailsTable, ex, ex.getMessage(), WIDTH, null);
        } finally {
            try {
                DbUtils.close(ps);
                DbUtils.close(conn);
            } catch (SQLException ex) {
                Logger.getLogger(mainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
